package dev.ricardo.movies;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.ToString;
import org.bson.types.ObjectId;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;
import org.springframework.data.mongodb.core.mapping.DocumentReference;

import java.util.List;

@Document(collection = "movies")  // Indicates this class is mapped to the 'movies' collection in MongoDB
@Data  // Lombok annotation to automatically generate getters, setters, toString, equals, and hashCode methods
@AllArgsConstructor  // Lombok annotation to generate a constructor with all fields
@NoArgsConstructor  // Lombok annotation to generate a no-argument constructor
@ToString // Automatically generates a nice string representation of the object
public class Movie {

    @Id  // Marks this field as the identifier (primary key) for MongoDB
    @JsonSerialize(using = ToStringSerializer.class)  // Ensures the ObjectId is serialized as a string in the response (not as a full object)
    private ObjectId id;  // The unique identifier for each movie, automatically generated by MongoDB

    @JsonProperty("imdbId")  // Ensures correct mapping of the 'imdbId' field
    private String imdbId;

    @JsonProperty("title")  // Ensures correct mapping of the 'title' field
    private String title;

    @JsonProperty("releaseDate")  // Ensures correct mapping of the 'releaseDate' field
    private String releaseDate;

    @JsonProperty("trailerLink")  // Ensures correct mapping of the 'trailerLink' field
    private String trailerLink;

    @JsonProperty("poster")  // Ensures correct mapping of the 'poster' field
    private String poster;

    @JsonProperty("genres")  // Ensures correct mapping of the 'genres' field
    private List<String> genres;

    @JsonProperty("backdrops")  // Ensures correct mapping of the 'backdrops' field
    private List<String> backdrops;

    @JsonProperty("reviewIds")
    @DocumentReference  // Indicates that this field holds references to other documents (in this case, Reviews)
    private List<Review> reviewIds;  // A list of review objects associated with this movie

    @Override
    public String toString() {
        return "{" +
                "id='" + id.toString() + '\'' +
                ", title='" + title + '\'' +
                ", releaseDate='" + releaseDate + '\'' +
                ", trailerLink='" + trailerLink + '\'' +
                ", poster='" + poster + '\'' +
                ", genres=" + genres +
                ", backdrops=" + backdrops +
                //", reviewIds=" + reviewIds +  // Optionally include reviewIds in the toString output
                '}';
    }
}
